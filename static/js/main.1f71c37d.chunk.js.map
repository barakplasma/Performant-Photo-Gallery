{"version":3,"sources":["GalleryPhoto.js","Gallery.js","App.js","registerServiceWorker.js","index.js"],"names":["GalleryPhoto","props","react_default","a","createElement","lib_default","height","offset","once","className","srcSet","imageData","highRes","media","mediumRes","src","lowRes","alt","imageSchema","type","minItems","maxItems","items","properties","$ref","imageHeight","imageWidth","required","definitions","photoUrl","enum","highResPhotoUrl","imageDimension","multipleOf","minimum","maximum","Gallery","imagesArray","jsf","generate","map","index","GalleryPhoto_GalleryPhoto","key","App","Gallery_Gallery","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"gQAcaA,SAAe,SAAAC,GAC1B,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAUG,OAAQ,IAAKC,OAAQ,IAAMC,MAAI,GACvCN,EAAAC,EAAAC,cAAA,WAASK,UAAU,iBACjBP,EAAAC,EAAAC,cAAA,UACEM,OAAQT,EAAMU,UAAUC,QACxBC,MAAM,8CAERX,EAAAC,EAAAC,cAAA,UACEM,OAAQT,EAAMU,UAAUG,UACxBD,MAAM,4CAERX,EAAAC,EAAAC,cAAA,OACEW,IAAKd,EAAMU,UAAUK,OACrBP,UAAU,gBACVQ,IAAI,yCCvBVC,EAAc,CAClBC,KAAM,QACNC,SAAU,EACVC,SAAU,IACVC,MAAO,CACLC,WAAY,CACVX,QAAS,CACPY,KAAM,iCAERV,UAAW,CACTU,KAAM,0BAERR,OAAQ,CACNQ,KAAM,0BAERC,YAAa,CACXD,KAAM,gCAERE,WAAY,CACVF,KAAM,iCAGVG,SAAU,CAAC,cAAe,aAAc,UAAW,YAAa,WAElEC,YAAa,CACXC,SAAU,CACRC,KAAM,CACJ,yCACA,yCACA,2CAGJC,gBAAiB,CACfD,KAAM,CACJ,2CACA,0CACA,2CAGJE,eAAgB,CACdb,KAAM,SACNc,WAAY,EACZC,QAAS,EACTC,QAAS,QAKFC,EAAU,WACrB,IAAMC,EAAcC,IAAIC,SAASrB,GACjC,OACEhB,EAAAC,EAAAC,cAAA,MAAIK,UAAU,gBACX4B,EAAYG,IAAI,SAAC7B,EAAW8B,GAAZ,OACfvC,EAAAC,EAAAC,cAACsC,EAAD,CAAc/B,UAAWA,EAAWgC,IAAKF,QCzClCG,mLAbX,OACE1C,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cAChBP,EAAAC,EAAAC,cAAA,MAAIK,UAAU,aAAd,0CAEFP,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACyC,EAAD,eARQC,aCMZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,iBCzEjEC,iBAAOpE,EAAAC,EAAAC,cAACmE,EAAD,MAASC,SAASC,eAAe,SDczB,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,4BAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,4BAAN,sBAEP5B,GAiDV,SAAiCO,GAE/ByB,MAAMzB,GACHI,KAAK,SAAAsB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C7B,UAAUC,cAAc6B,MAAM3B,KAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,KAAK,WAC7BT,OAAOC,SAASqC,aAKpBlC,EAAgBC,KAGnBc,MAAM,WACLF,QAAQC,IACN,mEArEAqB,CAAwBlC,GAIxBC,UAAUC,cAAc6B,MAAM3B,KAAK,WACjCQ,QAAQC,IACN,+GAMJd,EAAgBC,MCzCxBmC","file":"static/js/main.1f71c37d.chunk.js","sourcesContent":["import React from 'react';\nimport LazyLoad from 'react-lazyload';\n\nimport './GalleryPhoto.css';\n/**\n * Takes image data and converts it to an image tag\n * @param {object} props\n * @param {object} props.imageData\n * @param {string} props.imageData.lowRes -a src for the low res version of the image\n * @param {string} props.imageData.mediumRes -a src for the medium res version of the image\n * @param {string} props.imageData.highRes -a src for the high res version of the image\n * @param {number} props.imageData.imageHeight - high res image height in pixels\n * @param {number} props.imageData.imageWidth - high res image Width in pixels\n */\nexport const GalleryPhoto = props => {\n  return (\n    <li>\n      <LazyLoad height={300} offset={2000} once>\n        <picture className=\"aGalleryPhoto\">\n          <source\n            srcSet={props.imageData.highRes}\n            media=\"(min-height: 1280px), (min-width: 1280px)\"\n          />\n          <source\n            srcSet={props.imageData.mediumRes}\n            media=\"(min-height: 640px), (min-width: 640px)\"\n          />\n          <img\n            src={props.imageData.lowRes}\n            className=\"aGalleryPhoto\"\n            alt=\"a dog or a cat\"\n          />\n        </picture>\n      </LazyLoad>\n    </li>\n  );\n};\n","import React from 'react';\n\nimport './Gallery.css';\nimport { GalleryPhoto } from './GalleryPhoto';\n\nimport jsf from 'json-schema-faker';\n\nconst imageSchema = {\n  type: 'array',\n  minItems: 1,\n  maxItems: 1000,\n  items: {\n    properties: {\n      highRes: {\n        $ref: '#/definitions/highResPhotoUrl'\n      },\n      mediumRes: {\n        $ref: '#/definitions/photoUrl'\n      },\n      lowRes: {\n        $ref: '#/definitions/photoUrl'\n      },\n      imageHeight: {\n        $ref: '#/definitions/imageDimension'\n      },\n      imageWidth: {\n        $ref: '#/definitions/imageDimension'\n      }\n    },\n    required: ['imageHeight', 'imageWidth', 'highRes', 'mediumRes', 'lowRes']\n  },\n  definitions: {\n    photoUrl: {\n      enum: [\n        'https://lorempixel.com/320/240/animals',\n        'https://lorempixel.com/600/480/animals',\n        'https://lorempixel.com/600/600/animals'\n      ]\n    },\n    highResPhotoUrl: {\n      enum: [\n        'https://lorempixel.com/1920/1080/animals',\n        'https://lorempixel.com/1024/960/animals',\n        'https://lorempixel.com/800/600/animals'\n      ]\n    },\n    imageDimension: {\n      type: 'number',\n      multipleOf: 1,\n      minimum: 1,\n      maximum: 4096\n    }\n  }\n};\n\nexport const Gallery = () => {\n  const imagesArray = jsf.generate(imageSchema);\n  return (\n    <ul className=\"imageGallery\">\n      {imagesArray.map((imageData, index) => (\n        <GalleryPhoto imageData={imageData} key={index} />\n      ))}\n    </ul>\n  );\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Gallery } from './Gallery';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Welcome to a Performant Photo Gallery</h1>\n        </header>\n        <main>\n          <Gallery />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport { render } from 'react-snapshot';\n\nrender(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}